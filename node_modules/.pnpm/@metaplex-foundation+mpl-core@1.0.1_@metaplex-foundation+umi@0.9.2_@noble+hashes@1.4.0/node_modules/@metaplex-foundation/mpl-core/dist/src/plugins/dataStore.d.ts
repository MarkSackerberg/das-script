import { BaseDataStore, BaseDataStoreInitInfoArgs, BaseDataStoreUpdateInfoArgs, ExternalPluginAdapterSchema, ExternalRegistryRecord } from '../generated';
import { ExternalPluginAdapterKey } from './externalPluginAdapterKey';
import { ExternalPluginAdapterManifest } from './externalPluginAdapterManifest';
import { BaseExternalPluginAdapter } from './externalPluginAdapters';
import { LifecycleChecks } from './lifecycleChecks';
import { PluginAuthority } from './pluginAuthority';
export type DataStore = Omit<BaseDataStore, 'dataAuthority'> & {
    dataAuthority: PluginAuthority;
    data?: any;
};
export type DataStorePlugin = BaseExternalPluginAdapter & DataStore & {
    type: 'DataStore';
    dataAuthority: PluginAuthority;
};
export type DataStoreInitInfoArgs = Omit<BaseDataStoreInitInfoArgs, 'initPluginAuthority' | 'lifecycleChecks' | 'dataAuthority'> & {
    type: 'DataStore';
    initPluginAuthority?: PluginAuthority;
    lifecycleChecks?: LifecycleChecks;
    schema?: ExternalPluginAdapterSchema;
    dataAuthority: PluginAuthority;
};
export type DataStoreUpdateInfoArgs = Omit<BaseDataStoreUpdateInfoArgs, 'schema'> & {
    key: ExternalPluginAdapterKey;
    schema?: ExternalPluginAdapterSchema;
};
export declare function dataStoreInitInfoArgsToBase(d: DataStoreInitInfoArgs): BaseDataStoreInitInfoArgs;
export declare function dataStoreUpdateInfoArgsToBase(d: DataStoreUpdateInfoArgs): BaseDataStoreUpdateInfoArgs;
export declare function dataStoreFromBase(s: BaseDataStore, r: ExternalRegistryRecord, account: Uint8Array): DataStore;
export declare const dataStoreManifest: ExternalPluginAdapterManifest<DataStore, BaseDataStore, DataStoreInitInfoArgs, BaseDataStoreInitInfoArgs, DataStoreUpdateInfoArgs, BaseDataStoreUpdateInfoArgs>;
