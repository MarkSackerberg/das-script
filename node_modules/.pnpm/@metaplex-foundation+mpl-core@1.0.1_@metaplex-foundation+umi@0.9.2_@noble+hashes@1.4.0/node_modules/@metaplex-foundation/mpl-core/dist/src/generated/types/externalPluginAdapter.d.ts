/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { GetDataEnumKind, GetDataEnumKindContent, Serializer } from '@metaplex-foundation/umi/serializers';
import { BaseDataStore, BaseDataStoreArgs, BaseLifecycleHook, BaseLifecycleHookArgs, BaseOracle, BaseOracleArgs } from '.';
export type ExternalPluginAdapter = {
    __kind: 'LifecycleHook';
    fields: [BaseLifecycleHook];
} | {
    __kind: 'Oracle';
    fields: [BaseOracle];
} | {
    __kind: 'DataStore';
    fields: [BaseDataStore];
};
export type ExternalPluginAdapterArgs = {
    __kind: 'LifecycleHook';
    fields: [BaseLifecycleHookArgs];
} | {
    __kind: 'Oracle';
    fields: [BaseOracleArgs];
} | {
    __kind: 'DataStore';
    fields: [BaseDataStoreArgs];
};
export declare function getExternalPluginAdapterSerializer(): Serializer<ExternalPluginAdapterArgs, ExternalPluginAdapter>;
export declare function externalPluginAdapter(kind: 'LifecycleHook', data: GetDataEnumKindContent<ExternalPluginAdapterArgs, 'LifecycleHook'>['fields']): GetDataEnumKind<ExternalPluginAdapterArgs, 'LifecycleHook'>;
export declare function externalPluginAdapter(kind: 'Oracle', data: GetDataEnumKindContent<ExternalPluginAdapterArgs, 'Oracle'>['fields']): GetDataEnumKind<ExternalPluginAdapterArgs, 'Oracle'>;
export declare function externalPluginAdapter(kind: 'DataStore', data: GetDataEnumKindContent<ExternalPluginAdapterArgs, 'DataStore'>['fields']): GetDataEnumKind<ExternalPluginAdapterArgs, 'DataStore'>;
export declare function isExternalPluginAdapter<K extends ExternalPluginAdapter['__kind']>(kind: K, value: ExternalPluginAdapter): value is ExternalPluginAdapter & {
    __kind: K;
};
