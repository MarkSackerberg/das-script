"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findExtraAccounts = exports.createExternalPluginAdapterUpdateInfo = exports.createExternalPluginAdapterInitInfo = exports.isExternalPluginAdapterType = exports.externalRegistryRecordsToExternalPluginAdapterList = exports.externalPluginAdapterManifests = void 0;
const _1 = require(".");
const generated_1 = require("../generated");
const dataStore_1 = require("./dataStore");
const lifecycleChecks_1 = require("./lifecycleChecks");
const oracle_1 = require("./oracle");
const extraAccount_1 = require("./extraAccount");
exports.externalPluginAdapterManifests = {
    Oracle: oracle_1.oracleManifest,
    DataStore: dataStore_1.dataStoreManifest,
    LifecycleHook: _1.lifecycleHookManifest,
};
function externalRegistryRecordsToExternalPluginAdapterList(records, accountData) {
    const result = {};
    records.forEach((record) => {
        const deserializedPlugin = (0, generated_1.getExternalPluginAdapterSerializer)().deserialize(accountData, Number(record.offset))[0];
        const mappedPlugin = {
            lifecycleChecks: record.lifecycleChecks.__option === 'Some'
                ? (0, lifecycleChecks_1.lifecycleChecksFromBase)(record.lifecycleChecks.value)
                : undefined,
            authority: (0, _1.pluginAuthorityFromBase)(record.authority),
            offset: record.offset,
        };
        if (deserializedPlugin.__kind === 'Oracle') {
            if (!result.oracles) {
                result.oracles = [];
            }
            result.oracles.push({
                type: 'Oracle',
                ...mappedPlugin,
                ...(0, oracle_1.oracleFromBase)(deserializedPlugin.fields[0], record, accountData),
            });
        }
        else if (deserializedPlugin.__kind === 'DataStore') {
            if (!result.dataStores) {
                result.dataStores = [];
            }
            result.dataStores.push({
                type: 'DataStore',
                ...mappedPlugin,
                ...(0, dataStore_1.dataStoreFromBase)(deserializedPlugin.fields[0], record, accountData),
            });
        }
        else if (deserializedPlugin.__kind === 'LifecycleHook') {
            if (!result.lifecycleHooks) {
                result.lifecycleHooks = [];
            }
            result.lifecycleHooks.push({
                type: 'LifecycleHook',
                ...mappedPlugin,
                ...(0, _1.lifecycleHookFromBase)(deserializedPlugin.fields[0], record, accountData),
            });
        }
    });
    return result;
}
exports.externalRegistryRecordsToExternalPluginAdapterList = externalRegistryRecordsToExternalPluginAdapterList;
const isExternalPluginAdapterType = (plugin) => {
    if (plugin.type === 'Oracle' ||
        plugin.type === 'LifecycleHook' ||
        plugin.type === 'DataStore') {
        return true;
    }
    return false;
};
exports.isExternalPluginAdapterType = isExternalPluginAdapterType;
function createExternalPluginAdapterInitInfo({ type, ...args }) {
    const manifest = exports.externalPluginAdapterManifests[type];
    return {
        __kind: type,
        fields: [manifest.initToBase(args)],
    };
}
exports.createExternalPluginAdapterInitInfo = createExternalPluginAdapterInitInfo;
function createExternalPluginAdapterUpdateInfo({ type, ...args }) {
    const manifest = exports.externalPluginAdapterManifests[type];
    return {
        __kind: type,
        fields: [manifest.updateToBase(args)],
    };
}
exports.createExternalPluginAdapterUpdateInfo = createExternalPluginAdapterUpdateInfo;
const findExtraAccounts = (context, lifecycle, externalPluginAdapters, inputs) => {
    const accounts = [];
    externalPluginAdapters.oracles?.forEach((oracle) => {
        if (oracle.lifecycleChecks?.[lifecycle]) {
            if (oracle.baseAddressConfig) {
                accounts.push((0, extraAccount_1.extraAccountToAccountMeta)(context, oracle.baseAddressConfig, {
                    ...inputs,
                    program: oracle.baseAddress,
                }));
            }
            else {
                accounts.push({
                    pubkey: oracle.baseAddress,
                    isSigner: false,
                    isWritable: false,
                });
            }
        }
    });
    externalPluginAdapters.lifecycleHooks?.forEach((hook) => {
        if (hook.lifecycleChecks?.[lifecycle]) {
            accounts.push({
                pubkey: hook.hookedProgram,
                isSigner: false,
                isWritable: false,
            });
            hook.extraAccounts?.forEach((extra) => {
                accounts.push((0, extraAccount_1.extraAccountToAccountMeta)(context, extra, {
                    ...inputs,
                    program: hook.hookedProgram,
                }));
            });
        }
    });
    return accounts;
};
exports.findExtraAccounts = findExtraAccounts;
//# sourceMappingURL=externalPluginAdapters.js.map