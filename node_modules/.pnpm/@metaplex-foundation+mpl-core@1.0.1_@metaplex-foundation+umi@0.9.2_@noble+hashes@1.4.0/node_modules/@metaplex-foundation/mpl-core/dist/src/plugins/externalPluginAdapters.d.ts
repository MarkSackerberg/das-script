import { AccountMeta, Context, PublicKey } from '@metaplex-foundation/umi';
import { LifecycleHookInitInfoArgs, LifecycleHookPlugin, LifecycleHookUpdateInfoArgs } from '.';
import { BaseExternalPluginAdapterInitInfoArgs, BaseExternalPluginAdapterKey, BaseExternalPluginAdapterUpdateInfoArgs, ExternalRegistryRecord } from '../generated';
import { DataStoreInitInfoArgs, DataStorePlugin, DataStoreUpdateInfoArgs } from './dataStore';
import { LifecycleChecksContainer, LifecycleEvent } from './lifecycleChecks';
import { OracleInitInfoArgs, OraclePlugin, OracleUpdateInfoArgs } from './oracle';
import { BasePlugin } from './types';
export type ExternalPluginAdapterTypeString = BaseExternalPluginAdapterKey['__kind'];
export type BaseExternalPluginAdapter = BasePlugin & LifecycleChecksContainer;
export type ExternalPluginAdaptersList = {
    oracles?: OraclePlugin[];
    dataStores?: DataStorePlugin[];
    lifecycleHooks?: LifecycleHookPlugin[];
};
export type ExternalPluginAdapterInitInfoArgs = ({
    type: 'Oracle';
} & OracleInitInfoArgs) | ({
    type: 'LifecycleHook';
} & LifecycleHookInitInfoArgs) | ({
    type: 'DataStore';
} & DataStoreInitInfoArgs);
export type ExternalPluginAdapterUpdateInfoArgs = ({
    type: 'Oracle';
} & OracleUpdateInfoArgs) | ({
    type: 'LifecycleHook';
} & LifecycleHookUpdateInfoArgs) | ({
    type: 'DataStore';
} & DataStoreUpdateInfoArgs);
export declare const externalPluginAdapterManifests: {
    Oracle: import("./externalPluginAdapterManifest").ExternalPluginAdapterManifest<import("./oracle").Oracle, import("../generated").BaseOracle, OracleInitInfoArgs, import("../generated").BaseOracleInitInfoArgs, OracleUpdateInfoArgs, import("../generated").BaseOracleUpdateInfoArgs>;
    DataStore: import("./externalPluginAdapterManifest").ExternalPluginAdapterManifest<import("./dataStore").DataStore, import("../generated").BaseDataStore, DataStoreInitInfoArgs, import("../generated").BaseDataStoreInitInfoArgs, DataStoreUpdateInfoArgs, import("../generated").BaseDataStoreUpdateInfoArgs>;
    LifecycleHook: import("./externalPluginAdapterManifest").ExternalPluginAdapterManifest<import("./lifecycleHook").LifecycleHook, import("../generated").BaseLifecycleHook, LifecycleHookInitInfoArgs, import("../generated").BaseLifecycleHookInitInfoArgs, LifecycleHookUpdateInfoArgs, import("../generated").BaseLifecycleHookUpdateInfoArgs>;
};
export type ExternalPluginAdapterData = {
    dataLen: bigint;
    dataOffset: bigint;
};
export declare function externalRegistryRecordsToExternalPluginAdapterList(records: ExternalRegistryRecord[], accountData: Uint8Array): ExternalPluginAdaptersList;
export declare const isExternalPluginAdapterType: (plugin: {
    type: string;
}) => boolean;
export declare function createExternalPluginAdapterInitInfo({ type, ...args }: ExternalPluginAdapterInitInfoArgs): BaseExternalPluginAdapterInitInfoArgs;
export declare function createExternalPluginAdapterUpdateInfo({ type, ...args }: ExternalPluginAdapterUpdateInfoArgs): BaseExternalPluginAdapterUpdateInfoArgs;
export declare const findExtraAccounts: (context: Pick<Context, 'eddsa'>, lifecycle: LifecycleEvent, externalPluginAdapters: ExternalPluginAdaptersList, inputs: {
    asset: PublicKey;
    collection?: PublicKey;
    owner: PublicKey;
    recipient?: PublicKey;
}) => AccountMeta[];
