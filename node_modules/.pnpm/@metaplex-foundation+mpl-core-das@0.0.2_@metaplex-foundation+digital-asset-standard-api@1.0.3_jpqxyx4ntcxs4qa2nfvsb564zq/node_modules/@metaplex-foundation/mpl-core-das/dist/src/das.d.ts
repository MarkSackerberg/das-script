import { PublicKey, Umi } from '@metaplex-foundation/umi';
import { SearchAssetsRpcInput } from '@metaplex-foundation/digital-asset-standard-api';
import { AssetV1, CollectionV1 } from '@metaplex-foundation/mpl-core';
import { MPL_CORE_ASSET, MPL_CORE_COLLECTION } from './constants';
import { AssetOptions, Pagination } from './types';
declare function searchAssets(context: Umi, input: Omit<SearchAssetsRpcInput, 'interface' | 'burnt'> & {
    interface?: typeof MPL_CORE_ASSET;
} & AssetOptions): Promise<AssetV1[]>;
declare function searchAssets(context: Umi, input: Omit<SearchAssetsRpcInput, 'interface' | 'burnt'> & {
    interface?: typeof MPL_CORE_COLLECTION;
} & AssetOptions): Promise<CollectionV1[]>;
declare function searchCollections(context: Umi, input: Omit<SearchAssetsRpcInput, 'interface' | 'burnt'> & AssetOptions): Promise<CollectionV1[]>;
declare function getAssetsByOwner(context: Umi, input: {
    owner: PublicKey;
} & Pagination & AssetOptions): Promise<AssetV1[]>;
declare function getAssetsByAuthority(context: Umi, input: {
    authority: PublicKey;
} & Pagination & AssetOptions): Promise<AssetV1[]>;
declare function getAssetsByCollection(context: Umi, input: {
    collection: PublicKey;
} & Pagination & AssetOptions): Promise<AssetV1[]>;
declare function getCollectionsByUpdateAuthority(context: Umi, input: {
    updateAuthority: PublicKey;
} & Pagination & AssetOptions): Promise<CollectionV1[]>;
export declare const das: {
    readonly searchAssets: typeof searchAssets;
    readonly searchCollections: typeof searchCollections;
    readonly getAssetsByOwner: typeof getAssetsByOwner;
    readonly getAssetsByAuthority: typeof getAssetsByAuthority;
    readonly getAssetsByCollection: typeof getAssetsByCollection;
    readonly getCollectionsByUpdateAuthority: typeof getCollectionsByUpdateAuthority;
};
export {};
